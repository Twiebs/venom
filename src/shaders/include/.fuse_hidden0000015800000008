const float FOG_DENSITY = 0.005f;
const float FOG_GRADIENT = 2.0f;

#define UniformLocation_ModelMatrix 0
#define UniformLocation_ViewMatrix  1
#define UniformLocation_ProjectionMatrix 2
#define UniformLocation_LightSpaceMatrices 3
#define UniformLocation_CameraViewPosition 4

layout (location = 0) in vec3 in_position;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec3 in_tangent;
layout (location = 3) in vec2 in_texcoord;

layout (location = UniformLocation_ModelMatrix) uniform mat4 u_model_matrix;
layout (location = UniformLocation_ViewMatrix) uniform mat4 u_view_matrix;
layout (location = UniformLocation_ProjectionMatrix) uniform mat4 u_projection_matrix;
layout (location = UniformLocation_CameraViewPosition) uniform vec3 u_camera_view_position;

uniform mat4 u_light_space_matrix[4];

out VS_OUT
{
	vec3 position;
	vec3 normal;
	vec2 texcoord;
	float visibility;
	vec4 light_space_position;
} vs_out;

float apply_atmospheric_fog(vec3 position)
{
	float fog_start = 16.0 * 15;
	float fog_end = 16.0 * 7;

	float distance_to_vertex = length(u_camera_view_position - position);
	float fog_factor = 1.0 - clamp((fog_end - distance_to_vertex) / (fog_end - fog_start), 0.0, 1.0);
	return fog_factor;


//	float result = exp(-pow(distanceToVertex * FOG_DENSITY, FOG_GRADIENT));
	//return result;
}
